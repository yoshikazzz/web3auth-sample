{"version":3,"file":"static/js/938.2c0ca14e.chunk.js","mappings":"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","sources":["../node_modules/@web3auth/base-solana-adapter/src/baseSolanaAdapter.ts","../node_modules/@web3auth/base-solana-adapter/node_modules/base-x/src/index.js","../node_modules/@web3auth/base-solana-adapter/node_modules/bs58/index.js","../node_modules/@toruslabs/solana-embed/src/messages.ts","../node_modules/@toruslabs/solana-embed/src/interfaces.ts","../node_modules/@toruslabs/solana-embed/src/config.ts","../node_modules/@toruslabs/solana-embed/src/loglevel.ts","../node_modules/@toruslabs/solana-embed/src/utils.ts","../node_modules/@toruslabs/solana-embed/src/baseProvider.ts","../node_modules/@toruslabs/solana-embed/src/embedUtils.ts","../node_modules/@toruslabs/solana-embed/src/PopupHandler.ts","../node_modules/@toruslabs/solana-embed/src/communicationProvider.ts","../node_modules/@toruslabs/solana-embed/src/inPageProvider.ts","../node_modules/@toruslabs/solana-embed/src/siteMetadata.ts","../node_modules/@toruslabs/solana-embed/src/embed.ts","../node_modules/@web3auth/torus-solana-adapter/src/solanaWalletAdapter.ts","../node_modules/fast-deep-equal/index.js","../node_modules/is-stream/index.js"],"sourcesContent":["import {\n  ADAPTER_STATUS,\n  BaseAdapter,\n  checkIfTokenIsExpired,\n  clearToken,\n  getSavedToken,\n  saveToken,\n  signChallenge,\n  UserAuthInfo,\n  verifySignedChallenge,\n  WalletLoginError,\n} from \"@web3auth/base\";\nimport bs58 from \"bs58\";\n\nexport abstract class BaseSolanaAdapter<T> extends BaseAdapter<T> {\n  async authenticateUser(): Promise<UserAuthInfo> {\n    if (!this.provider || !this.chainConfig?.chainId) throw WalletLoginError.notConnectedError();\n\n    const { chainNamespace, chainId } = this.chainConfig;\n\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    const accounts = await this.provider.request<string[]>({\n      method: \"getAccounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      const existingToken = getSavedToken(accounts[0] as string, this.name);\n      if (existingToken) {\n        const isExpired = checkIfTokenIsExpired(existingToken);\n        if (!isExpired) {\n          return { idToken: existingToken };\n        }\n      }\n\n      const payload = {\n        domain: window.location.origin,\n        uri: window.location.href,\n        address: accounts[0],\n        chainId: parseInt(chainId, 16),\n        version: \"1\",\n        nonce: Math.random().toString(36).slice(2),\n        issuedAt: new Date().toISOString(),\n      };\n\n      const challenge = await signChallenge(payload, chainNamespace);\n      const encodedMessage = new TextEncoder().encode(challenge);\n      const signedMessage = await this.provider.request<Uint8Array>({\n        method: \"signMessage\",\n        params: {\n          message: encodedMessage,\n          display: \"utf8\",\n        },\n      });\n      const idToken = await verifySignedChallenge(chainNamespace, bs58.encode(signedMessage as Uint8Array), challenge, this.name, this.sessionTime);\n      saveToken(accounts[0] as string, this.name, idToken);\n      return {\n        idToken,\n      };\n    }\n    throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n  }\n\n  async disconnect(): Promise<void> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.disconnectionError(\"Not connected with wallet\");\n    const accounts = await this.provider.request<string[]>({\n      method: \"getAccounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      clearToken(accounts[0], this.name);\n    }\n  }\n}\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) {\n    } else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength)\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source)\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = new Uint8Array(zeroes + (size - it4))\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","const basex = require('base-x')\nconst ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","export default {\n  errors: {\n    disconnected: (): string => \"Torus: Lost connection to Torus.\",\n    permanentlyDisconnected: (): string => \"Torus: Disconnected from iframe. Page reload required.\",\n    unsupportedSync: (method: string): string =>\n      `Torus: The Torus Ethereum provider does not support synchronous methods like ${method} without a callback parameter.`,\n    invalidDuplexStream: (): string => \"Must provide a Node.js-style duplex stream.\",\n    invalidOptions: (maxEventListeners: number): string => `Invalid options. Received: { maxEventListeners: ${maxEventListeners}}`,\n    invalidRequestArgs: (): string => `Expected a single, non-array, object argument.`,\n    invalidRequestMethod: (): string => `'args.method' must be a non-empty string.`,\n    invalidRequestParams: (): string => `'args.params' must be an object or array if provided.`,\n    invalidLoggerObject: (): string => `'args.logger' must be an object if provided.`,\n    invalidLoggerMethod: (method: string): string => `'args.logger' must include required method '${method}'.`,\n  },\n  info: {\n    connected: (chainId: string): string => `Torus: Connected to chain with ID \"${chainId}\".`,\n  },\n  warnings: {},\n};\n","import { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\n\nexport const PAYMENT_PROVIDER = {\n  MOONPAY: \"moonpay\",\n  WYRE: \"wyre\",\n  RAMPNETWORK: \"rampnetwork\",\n  XANPOOL: \"xanpool\",\n  MERCURYO: \"mercuryo\",\n  TRANSAK: \"transak\",\n} as const;\n\nexport const TORUS_BUILD_ENV = {\n  PRODUCTION: \"production\",\n  DEVELOPMENT: \"development\",\n  TESTING: \"testing\",\n} as const;\n\nexport type PAYMENT_PROVIDER_TYPE = typeof PAYMENT_PROVIDER[keyof typeof PAYMENT_PROVIDER];\n\nexport type TORUS_BUILD_ENV_TYPE = typeof TORUS_BUILD_ENV[keyof typeof TORUS_BUILD_ENV];\n\nexport const BUTTON_POSITION = {\n  BOTTOM_LEFT: \"bottom-left\",\n  TOP_LEFT: \"top-left\",\n  BOTTOM_RIGHT: \"bottom-right\",\n  TOP_RIGHT: \"top-right\",\n} as const;\n\nexport type EMBED_TRANSLATION_ITEM = {\n  continue: string;\n  actionRequired: string;\n  pendingAction: string;\n  cookiesRequired: string;\n  enableCookies: string;\n  clickHere: string;\n};\n\nexport type BUTTON_POSITION_TYPE = typeof BUTTON_POSITION[keyof typeof BUTTON_POSITION];\n\nexport type WALLET_PATH = \"transfer\" | \"topup\" | \"home\" | \"settings\" | \"history\" | \"discover\";\n\nexport const LOGIN_PROVIDER = {\n  GOOGLE: \"google\",\n  FACEBOOK: \"facebook\",\n  REDDIT: \"reddit\",\n  DISCORD: \"discord\",\n  TWITCH: \"twitch\",\n  APPLE: \"apple\",\n  LINE: \"line\",\n  GITHUB: \"github\",\n  KAKAO: \"kakao\",\n  LINKEDIN: \"linkedin\",\n  TWITTER: \"twitter\",\n  WEIBO: \"weibo\",\n  WECHAT: \"wechat\",\n  EMAIL_PASSWORDLESS: \"email_passwordless\",\n} as const;\n\nexport type LOGIN_PROVIDER_TYPE = typeof LOGIN_PROVIDER[keyof typeof LOGIN_PROVIDER];\n\nexport interface TorusCtorArgs {\n  /**\n   * Z-index of the modal and iframe\n   * @defaultValue 99999\n   */\n  modalZIndex?: number;\n}\n\nexport interface NetworkInterface {\n  /**\n   * Block explorer url for the chain\n   * @example https://explorer.solana.com/\n   */\n  blockExplorerUrl: string;\n  /**\n   * Logo url for the base token\n   */\n  logo: string;\n  /**\n   * Name for ticker\n   * @example 'Solana'\n   */\n  tickerName: string;\n  /**\n   * Symbol for ticker\n   * @example SOL\n   */\n  ticker: string;\n  /**\n   * RPC target Url for the chain\n   * @example https://api.devnet.solana.com/\n   */\n  rpcTarget: string;\n  /**\n   * Chain Id parameter(hex with 0x prefix) for the network. Mandatory for all networks. (assign one with a map to network identifier for platforms)\n   * @example 0x1 for mainnet, 0x2 for testnet, 0x3 for devnet,  'loading' if not connected to anything yet or connection fails\n   * @defaultValue 'loading'\n   */\n  chainId: string;\n  /**\n   * Display name for the network\n   */\n  displayName: string;\n}\n\nexport interface PaymentParams {\n  /**\n   * Address to send the funds to\n   */\n  selectedAddress?: string;\n  /**\n   * Default fiat currency for the user to make the payment in\n   */\n  selectedCurrency?: string;\n  /**\n   * Amount to buy in the selectedCurrency\n   */\n  fiatValue?: number;\n  /**\n   * Cryptocurrency to buy\n   */\n  selectedCryptoCurrency?: string;\n  /**\n   * Amount Cryptocurrency to buy\n   */\n  cryptoAmount?: number;\n}\n\nexport interface LoginParams {\n  loginProvider?: string;\n}\n\nexport interface UserInfo {\n  /**\n   * Email of the logged in user\n   */\n  email: string;\n  /**\n   * Full name of the logged in user\n   */\n  name: string;\n  /**\n   * Profile image of the logged in user\n   */\n  profileImage: string;\n  /**\n   * verifier of the logged in user (google, facebook etc)\n   */\n  verifier: string;\n  /**\n   * Verifier Id of the logged in user\n   *\n   * email for google,\n   * id for facebook,\n   * username for reddit,\n   * id for twitch,\n   * id for discord\n   */\n  verifierId: string;\n}\n\nexport interface LocaleLinks<T> {\n  /**\n   * Item corresponding to english\n   */\n  en?: T;\n  /**\n   * Item corresponding to japanese\n   */\n  ja?: T;\n  /**\n   * Item corresponding to korean\n   */\n  ko?: T;\n  /**\n   * Item corresponding to german\n   */\n  de?: T;\n  /**\n   * Item corresponding to chinese (simplified)\n   */\n  zh?: T;\n  /**\n   * Item corresponding to spanish\n   */\n  es?: T;\n}\n\nexport type NetworkLabel = \"mainnet-beta\" | \"testnet\" | \"devnet\";\n\nexport interface TorusParams {\n  /**\n   * Determines where the torus widget is visible on the page.\n   * @defaultValue bottom-left\n   */\n  buttonPosition?: BUTTON_POSITION_TYPE;\n  /**\n   * Api key\n   * Get yours today at {@link https://developer.tor.us | Dashboard}\n   */\n  apiKey?: string;\n\n  /**\n   * Torus Network Object\n   */\n  network?: NetworkInterface | NetworkLabel;\n  /**\n   * Build Environment of Torus.\n   *\n   * production uses https://solana.tor.us,\n   *\n   * development uses http://localhost:8080 (expects torus-website to be run locally),\n   *\n   * testing uses https://solana-testing.tor.us (latest internal build)\n   * @defaultValue production\n   */\n  buildEnv?: TORUS_BUILD_ENV_TYPE;\n  /**\n   * Enables or disables logging.\n   *\n   * Defaults to false in prod and true in other environments\n   */\n  enableLogging?: boolean;\n  /**\n   * whether to show/hide torus widget.\n   *\n   * Defaults to true\n   * @defaultValue true\n   */\n  showTorusButton?: boolean;\n  /**\n   * Prefers to use localStorage instead of sessionStorage for torus iframe. Allows longer lived sessions\n   *\n   * Defaults to false\n   * @defaultValue false\n   */\n  useLocalStorage?: boolean;\n  /**\n   * Allows passing external data for initialize\n   *\n   * Defaults to empty object\n   */\n  extraParams?: { [keyof: string]: string };\n}\n\nexport interface TorusLoginParams {\n  loginProvider?: LOGIN_PROVIDER_TYPE;\n  login_hint?: string;\n}\n\nexport interface ProviderOptions {\n  /**\n   * The name of the stream used to connect to the wallet.\n   */\n  jsonRpcStreamName?: string;\n\n  /**\n   * The maximum number of event listeners.\n   */\n  maxEventListeners?: number;\n}\n\nexport interface BaseProviderState {\n  isConnected: boolean;\n  initialized: boolean;\n  isPermanentlyDisconnected: boolean;\n  hasEmittedConnection: boolean;\n}\n\nexport interface InPageProviderState extends BaseProviderState {\n  accounts: null | string[];\n  isUnlocked: boolean;\n}\n\nexport interface CommunicationProviderState extends BaseProviderState {\n  buttonPosition: string;\n  isLoggedIn: boolean;\n  torusWidgetVisibility: boolean;\n  currentLoginProvider: LOGIN_PROVIDER_TYPE;\n  isIFrameFullScreen: boolean;\n}\n\nexport type Maybe<T> = Partial<T> | T | null | undefined;\n\nexport interface UnValidatedJsonRpcRequest extends JRPCRequest<unknown> {\n  windowId?: string;\n}\n\nexport interface RequestArguments<T> {\n  /** The RPC method to request. */\n  method: string;\n\n  /** The params of the RPC method, if any. */\n  params?: T;\n}\n","import { EMBED_TRANSLATION_ITEM, LocaleLinks, LOGIN_PROVIDER } from \"./interfaces\";\n\nconst translations = {\n  en: {\n    embed: {\n      continue: \"Continue\",\n      actionRequired: \"Authorization required\",\n      pendingAction: \"Click continue to proceed with your request in a popup\",\n      cookiesRequired: \"Cookies Required\",\n      enableCookies: \"Please enable cookies in your browser preferences to access Torus\",\n      clickHere: \"More Info\",\n    },\n  },\n  de: {\n    embed: {\n      continue: \"Fortsetzen\",\n      actionRequired: \"Autorisierung erforderlich\",\n      pendingAction: \"Klicken Sie in einem Popup auf Weiter, um mit Ihrer Anfrage fortzufahren\",\n      cookiesRequired: \"Cookies benötigt\",\n      enableCookies: \"Bitte aktivieren Sie Cookies in Ihren Browsereinstellungen, um auf Torus zuzugreifen\",\n      clickHere: \"Mehr Info\",\n    },\n  },\n  ja: {\n    embed: {\n      continue: \"継続する\",\n      actionRequired: \"認証が必要です\",\n      pendingAction: \"続行をクリックして、ポップアップでリクエストを続行します\",\n      cookiesRequired: \"必要なクッキー\",\n      enableCookies: \"Torusにアクセスするには、ブラウザの設定でCookieを有効にしてください。\",\n      clickHere: \"詳しくは\",\n    },\n  },\n  ko: {\n    embed: {\n      continue: \"계속하다\",\n      actionRequired: \"승인 필요\",\n      pendingAction: \"팝업에서 요청을 진행하려면 계속을 클릭하십시오.\",\n      cookiesRequired: \"쿠키 필요\",\n      enableCookies: \"브라우저 환경 설정에서 쿠키를 활성화하여 Torus에 액세스하십시오.\",\n      clickHere: \"더 많은 정보\",\n    },\n  },\n  zh: {\n    embed: {\n      continue: \"继续\",\n      actionRequired: \"需要授权\",\n      pendingAction: \"单击继续以在弹出窗口中继续您的请求\",\n      cookiesRequired: \"必填Cookie\",\n      enableCookies: \"请在您的浏览器首选项中启用cookie以访问Torus。\",\n      clickHere: \"更多信息\",\n    },\n  },\n} as LocaleLinks<{ embed: EMBED_TRANSLATION_ITEM }>;\n\nexport default {\n  supportedVerifierList: [LOGIN_PROVIDER.GOOGLE, LOGIN_PROVIDER.REDDIT, LOGIN_PROVIDER.DISCORD],\n  api: \"https://api.tor.us\",\n  translations,\n  prodTorusUrl: \"\",\n  localStorageKey: `torus-${window.location.hostname}`,\n};\n","import loglevel from \"loglevel\";\n\nexport default loglevel.getLogger(\"solana-embed\");\n","import { JRPCMiddleware, SafeEventEmitter } from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\nimport { LogLevelDesc } from \"loglevel\";\n\nimport config from \"./config\";\nimport { NetworkInterface, NetworkLabel } from \"./interfaces\";\nimport log from \"./loglevel\";\n\n// utility functions\n\n/**\n * json-rpc-engine middleware that logs RPC errors and and validates req.method.\n *\n * @param log - The logging API to use.\n * @returns  json-rpc-engine middleware function\n */\nexport function createErrorMiddleware(): JRPCMiddleware<unknown, unknown> {\n  return (req, res, next) => {\n    // json-rpc-engine will terminate the request when it notices this error\n    if (typeof req.method !== \"string\" || !req.method) {\n      res.error = ethErrors.rpc.invalidRequest({\n        message: `The request 'method' must be a non-empty string.`,\n        data: req,\n      });\n    }\n\n    next((done) => {\n      const { error } = res;\n      if (!error) {\n        return done();\n      }\n      log.error(`Torus - RPC Error: ${error.message}`, error);\n      return done();\n    });\n  };\n}\n\n/**\n * Logs a stream disconnection error. Emits an 'error' if given an\n * EventEmitter that has listeners for the 'error' event.\n *\n * @param log - The logging API to use.\n * @param remoteLabel - The label of the disconnected stream.\n * @param error - The associated error to log.\n * @param emitter - The logging API to use.\n */\nexport function logStreamDisconnectWarning(remoteLabel: string, error: Error, emitter: SafeEventEmitter): void {\n  let warningMsg = `Torus: Lost connection to \"${remoteLabel}\".`;\n  if (error?.stack) {\n    warningMsg += `\\n${error.stack}`;\n  }\n  log.warn(warningMsg);\n  if (emitter && emitter.listenerCount(\"error\") > 0) {\n    emitter.emit(\"error\", warningMsg);\n  }\n}\n\nexport const getWindowId = (): string => Math.random().toString(36).slice(2);\n\nexport const getTorusUrl = async (buildEnv: string): Promise<{ torusUrl: string; logLevel: LogLevelDesc }> => {\n  let torusUrl: string;\n  let logLevel: LogLevelDesc;\n  // const versionUsed = version;\n  // log.info(\"solana embed version used: \", versionUsed);\n  switch (buildEnv) {\n    case \"testing\":\n      torusUrl = \"https://solana-testing.tor.us\";\n      logLevel = \"debug\";\n      break;\n    case \"development\":\n      torusUrl = \"http://localhost:8080\";\n      logLevel = \"debug\";\n      break;\n    default:\n      torusUrl = `https://solana.tor.us`;\n      logLevel = \"error\";\n      break;\n  }\n  return { torusUrl, logLevel };\n};\n\nexport const getUserLanguage = (): string => {\n  let userLanguage = window.navigator.language || \"en-US\";\n  const userLanguages = userLanguage.split(\"-\");\n  userLanguage = Object.prototype.hasOwnProperty.call(config.translations, userLanguages[0]) ? userLanguages[0] : \"en\";\n  return userLanguage;\n};\n\nexport const NOOP = (): void => {\n  // empty function\n};\n\nexport const FEATURES_PROVIDER_CHANGE_WINDOW = { height: 660, width: 375 };\nexport const FEATURES_DEFAULT_WALLET_WINDOW = { height: 740, width: 1315 };\nexport const FEATURES_DEFAULT_POPUP_WINDOW = { height: 700, width: 1200 };\nexport const FEATURES_CONFIRM_WINDOW = { height: 600, width: 400 };\n\nexport function storageAvailable(type: \"localStorage\" | \"sessionStorage\"): boolean {\n  let storage: Storage;\n  try {\n    storage = window[type];\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return (\n      e &&\n      // everything except Firefox\n      (e.code === 22 ||\n        // Firefox\n        e.code === 1014 ||\n        // test name field too, because code might not be present\n        // everything except Firefox\n        e.name === \"QuotaExceededError\" ||\n        // Firefox\n        e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") &&\n      // acknowledge QuotaExceededError only if there's something already stored\n      storage &&\n      storage.length !== 0\n    );\n  }\n}\n\n/**\n * popup handler utils\n */\nexport function getPopupFeatures({ width: w, height: h }: { width: number; height: number }): string {\n  // Fixes dual-screen position                             Most browsers      Firefox\n  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n\n  const width = window.innerWidth\n    ? window.innerWidth\n    : document.documentElement.clientWidth\n    ? document.documentElement.clientWidth\n    : window.screen.width;\n\n  const height = window.innerHeight\n    ? window.innerHeight\n    : document.documentElement.clientHeight\n    ? document.documentElement.clientHeight\n    : window.screen.height;\n\n  const systemZoom = 1; // No reliable estimate\n\n  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  const features = `titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=${h / systemZoom},width=${w / systemZoom},top=${top},left=${left}`;\n  return features;\n}\n\nexport const getNetworkConfig = (label: NetworkLabel): NetworkInterface | undefined => {\n  switch (label) {\n    case \"mainnet-beta\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x1\",\n        displayName: \"Solana Mainnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://green-dark-sky.solana-mainnet.quiknode.pro/0b4b99540b7930cf590dc7fb0a2d1c9a906fd53c/\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\",\n      } as NetworkInterface;\n\n    case \"testnet\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x2\",\n        displayName: \"Solana Testnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://spring-black-waterfall.solana-testnet.quiknode.pro/89830c37acd15df105b23742d37f33dc85b5eff8/\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\",\n      } as NetworkInterface;\n\n    case \"devnet\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x3\",\n        displayName: \"Solana Devnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://api.devnet.solana.com\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\",\n      } as NetworkInterface;\n\n    default:\n      return undefined;\n  }\n};\n","import { createLoggerMiddleware, SafeEventEmitterProvider, SendCallBack } from \"@toruslabs/base-controllers\";\nimport {\n  createIdRemapMiddleware,\n  createStreamMiddleware,\n  getRpcPromiseCallback,\n  JRPCEngine,\n  JRPCRequest,\n  JRPCResponse,\n  ObjectMultiplex,\n  SafeEventEmitter,\n  Stream,\n} from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\nimport { duplex as isDuplexStream } from \"is-stream\";\nimport pump from \"pump\";\nimport type { Duplex } from \"readable-stream\";\n\nimport { BaseProviderState, Maybe, ProviderOptions, RequestArguments, UnValidatedJsonRpcRequest } from \"./interfaces\";\nimport messages from \"./messages\";\nimport { createErrorMiddleware, logStreamDisconnectWarning } from \"./utils\";\n\nabstract class BaseProvider<U extends BaseProviderState> extends SafeEventEmitter implements SafeEventEmitterProvider {\n  /**\n   * Indicating that this provider is a Torus provider.\n   */\n  public readonly isTorus: true;\n\n  _rpcEngine: JRPCEngine;\n\n  jsonRpcConnectionEvents: SafeEventEmitter;\n\n  protected _state: U;\n\n  constructor(connectionStream: Duplex, { maxEventListeners = 100, jsonRpcStreamName = \"provider\" }: ProviderOptions) {\n    super();\n    if (!isDuplexStream(connectionStream)) {\n      throw new Error(messages.errors.invalidDuplexStream());\n    }\n    this.isTorus = true;\n    this.setMaxListeners(maxEventListeners);\n\n    this._handleConnect = this._handleConnect.bind(this);\n    this._handleDisconnect = this._handleDisconnect.bind(this);\n    this._handleStreamDisconnect = this._handleStreamDisconnect.bind(this);\n\n    this._rpcRequest = this._rpcRequest.bind(this);\n    this._initializeState = this._initializeState.bind(this);\n\n    this.request = this.request.bind(this);\n    this.sendAsync = this.sendAsync.bind(this);\n    // this.enable = this.enable.bind(this);\n\n    // setup connectionStream multiplexing\n    const mux = new ObjectMultiplex();\n    pump(\n      connectionStream as unknown as Stream,\n      mux as unknown as Stream,\n      connectionStream as unknown as Stream,\n      this._handleStreamDisconnect.bind(this, \"Torus\")\n    );\n\n    // ignore phishing warning message (handled elsewhere)\n    mux.ignoreStream(\"phishing\");\n\n    // setup own event listeners\n    // connect to async provider\n\n    const jsonRpcConnection = createStreamMiddleware();\n    pump(\n      jsonRpcConnection.stream as unknown as Stream,\n      mux.createStream(jsonRpcStreamName) as unknown as Stream,\n      jsonRpcConnection.stream as unknown as Stream,\n      this._handleStreamDisconnect.bind(this, \"Torus RpcProvider\")\n    );\n\n    // handle RPC requests via dapp-side rpc engine\n    const rpcEngine = new JRPCEngine();\n    rpcEngine.push(createIdRemapMiddleware());\n    rpcEngine.push(createErrorMiddleware());\n    rpcEngine.push(createLoggerMiddleware({ origin: location.origin }));\n    rpcEngine.push(jsonRpcConnection.middleware);\n    this._rpcEngine = rpcEngine;\n\n    this.jsonRpcConnectionEvents = jsonRpcConnection.events;\n  }\n\n  /**\n   * Submits an RPC request for the given method, with the given params.\n   * Resolves with the result of the method call, or rejects on error.\n   */\n  async request<TArgs, TResponse>(args: RequestArguments<TArgs>): Promise<Maybe<TResponse>> {\n    if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestArgs(),\n        data: args,\n      });\n    }\n\n    const { method, params } = args;\n\n    if (typeof method !== \"string\" || method.length === 0) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestMethod(),\n        data: args,\n      });\n    }\n\n    if (params !== undefined && !Array.isArray(params) && (typeof params !== \"object\" || params === null)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestParams(),\n        data: args,\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      this._rpcRequest({ method, params }, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n\n  send<T, V>(req: JRPCRequest<T>, callback: SendCallBack<V>): void;\n\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n  send(payload: JRPCRequest<unknown>, callback: (error: Error | null, result?: JRPCResponse<unknown>) => void): void {\n    this._rpcRequest(payload, callback);\n  }\n\n  sendAsync<T, V>(req: JRPCRequest<T>): Promise<V>;\n\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n  sendAsync(payload: JRPCRequest<unknown>): Promise<unknown> {\n    return new Promise((resolve, reject) => {\n      this._rpcRequest(payload, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n\n  /**\n   * Called when connection is lost to critical streams.\n   *\n   * emits TorusInpageProvider#disconnect\n   */\n  protected _handleStreamDisconnect(streamName: string, error: Error): void {\n    logStreamDisconnectWarning(streamName, error, this);\n    this._handleDisconnect(false, error ? error.message : undefined);\n  }\n\n  // Private Methods\n  //= ===================\n  /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */\n  abstract _initializeState(...args: unknown[]): Promise<void>;\n\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n  protected abstract _rpcRequest(\n    payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[],\n    callback: (...args: unknown[]) => void,\n    isInternal?: boolean\n  ): void;\n\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits TorusInPageProvider#connect\n   */\n  protected abstract _handleConnect(...args: unknown[]): void;\n\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n  protected abstract _handleDisconnect(isRecoverable: boolean, errorMessage?: string): void;\n}\n\nexport default BaseProvider;\n","export const handleEvent = (handle: EventTarget, eventName: string, handler: (...args: unknown[]) => void, ...handlerArgs: unknown[]): void => {\n  const handlerWrapper = () => {\n    handler(...handlerArgs);\n    handle.removeEventListener(eventName, handlerWrapper);\n  };\n  handle.addEventListener(eventName, handlerWrapper);\n};\n\nexport async function documentReady(): Promise<void> {\n  return new Promise<void>((resolve) => {\n    if (document.readyState !== \"loading\") {\n      resolve();\n    } else {\n      handleEvent(document, \"DOMContentLoaded\", resolve);\n    }\n  });\n}\n\nexport const htmlToElement = <T extends Element>(html: string): T => {\n  const template = window.document.createElement(\"template\");\n  const trimmedHtml = html.trim(); // Never return a text node of whitespace as the result\n  template.innerHTML = trimmedHtml;\n  return template.content.firstChild as T;\n};\n","import { SafeEventEmitter } from \"@toruslabs/openlogin-jrpc\";\n\nimport { FEATURES_DEFAULT_POPUP_WINDOW, getPopupFeatures } from \"./utils\";\n\nclass PopupHandler extends SafeEventEmitter {\n  url: URL;\n\n  target: string;\n\n  features: string;\n\n  window: Window;\n\n  windowTimer: number;\n\n  iClosedWindow: boolean;\n\n  constructor({ url, target, features }: { url: URL; target?: string; features?: string }) {\n    super();\n    this.url = url;\n    this.target = target || \"_blank\";\n    this.features = features || getPopupFeatures(FEATURES_DEFAULT_POPUP_WINDOW);\n    this.window = undefined;\n    this.windowTimer = undefined;\n    this.iClosedWindow = false;\n    this._setupTimer();\n  }\n\n  _setupTimer(): void {\n    this.windowTimer = Number(\n      setInterval(() => {\n        if (this.window && this.window.closed) {\n          clearInterval(this.windowTimer);\n          if (!this.iClosedWindow) {\n            this.emit(\"close\");\n          }\n          this.iClosedWindow = false;\n          this.window = undefined;\n        }\n        if (this.window === undefined) clearInterval(this.windowTimer);\n      }, 500)\n    );\n  }\n\n  open(): Promise<void> {\n    this.window = window.open(this.url.href, this.target, this.features);\n    if (this.window?.focus) this.window.focus();\n    return Promise.resolve();\n  }\n\n  close(): void {\n    this.iClosedWindow = true;\n    if (this.window) this.window.close();\n  }\n\n  redirect(locationReplaceOnRedirect: boolean): void {\n    if (locationReplaceOnRedirect) {\n      window.location.replace(this.url.href);\n    } else {\n      window.location.href = this.url.href;\n    }\n  }\n}\n\nexport default PopupHandler;\n","import { COMMUNICATION_JRPC_METHODS, COMMUNICATION_NOTIFICATIONS, CommunicationWalletProviderState } from \"@toruslabs/base-controllers\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { EthereumRpcError } from \"eth-rpc-errors\";\nimport type { Duplex } from \"readable-stream\";\n\nimport BaseProvider from \"./baseProvider\";\nimport configuration from \"./config\";\nimport { documentReady, htmlToElement } from \"./embedUtils\";\nimport {\n  BUTTON_POSITION,\n  CommunicationProviderState,\n  EMBED_TRANSLATION_ITEM,\n  LOGIN_PROVIDER_TYPE,\n  ProviderOptions,\n  RequestArguments,\n  UnValidatedJsonRpcRequest,\n} from \"./interfaces\";\nimport log from \"./loglevel\";\nimport messages from \"./messages\";\nimport PopupHandler from \"./PopupHandler\";\nimport { FEATURES_CONFIRM_WINDOW, getPopupFeatures, getUserLanguage } from \"./utils\";\n\nclass TorusCommunicationProvider extends BaseProvider<CommunicationProviderState> {\n  protected static _defaultState: CommunicationProviderState = {\n    buttonPosition: \"bottom-left\",\n    currentLoginProvider: null,\n    isIFrameFullScreen: false,\n    hasEmittedConnection: false,\n\n    torusWidgetVisibility: false,\n    initialized: false,\n    isLoggedIn: false,\n    isPermanentlyDisconnected: false,\n    isConnected: false,\n  };\n\n  public embedTranslations: EMBED_TRANSLATION_ITEM;\n\n  public torusUrl: string;\n\n  public dappStorageKey: string;\n\n  public windowRefs: Record<string, PopupHandler>;\n\n  tryWindowHandle: (payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], cb: (...args: unknown[]) => void) => void;\n\n  private torusAlertContainer: HTMLDivElement;\n\n  private torusIframe: HTMLIFrameElement;\n\n  constructor(connectionStream: Duplex, { maxEventListeners = 100, jsonRpcStreamName = \"provider\" }: ProviderOptions) {\n    super(connectionStream, { maxEventListeners, jsonRpcStreamName });\n\n    // private state\n    this._state = {\n      ...TorusCommunicationProvider._defaultState,\n    };\n\n    // public state\n    this.torusUrl = \"\";\n    this.dappStorageKey = \"\";\n    const languageTranslations = configuration.translations[getUserLanguage()];\n    this.embedTranslations = languageTranslations.embed;\n    this.windowRefs = {};\n\n    // setup own event listeners\n\n    // EIP-1193 connect\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n\n    const notificationHandler = (payload: RequestArguments<Record<string, unknown>>) => {\n      const { method, params } = payload;\n      if (method === COMMUNICATION_NOTIFICATIONS.IFRAME_STATUS) {\n        const { isFullScreen, rid } = params;\n        this._displayIframe({ isFull: isFullScreen as boolean, rid: rid as string });\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CREATE_WINDOW) {\n        const { windowId, url } = params as Record<string, string>;\n        this._createPopupBlockAlert(windowId, url);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CLOSE_WINDOW) {\n        this._handleCloseWindow(params);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_IN) {\n        const { currentLoginProvider } = params;\n        this._state.isLoggedIn = true;\n        this._state.currentLoginProvider = currentLoginProvider as LOGIN_PROVIDER_TYPE;\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_OUT) {\n        this._state.isLoggedIn = false;\n        this._state.currentLoginProvider = null;\n        this._displayIframe();\n      }\n    };\n\n    this.jsonRpcConnectionEvents.on(\"notification\", notificationHandler);\n  }\n\n  get isLoggedIn(): boolean {\n    return this._state.isLoggedIn;\n  }\n\n  get isIFrameFullScreen(): boolean {\n    return this._state.isIFrameFullScreen;\n  }\n\n  /**\n   * Returns whether the inPage provider is connected to Torus.\n   */\n  isConnected(): boolean {\n    return this._state.isConnected;\n  }\n\n  async _initializeState(params: Record<string, unknown>): Promise<void> {\n    try {\n      const { torusUrl, dappStorageKey, torusAlertContainer, torusIframe } = params;\n      this.torusUrl = torusUrl as string;\n      this.dappStorageKey = dappStorageKey as string;\n      this.torusAlertContainer = torusAlertContainer as HTMLDivElement;\n      this.torusIframe = torusIframe as HTMLIFrameElement;\n      this.torusIframe.addEventListener(\"load\", () => {\n        // only do this if iframe is not full screen\n        if (!this._state.isIFrameFullScreen) this._displayIframe();\n      });\n      const { currentLoginProvider, isLoggedIn } = (await this.request({\n        method: COMMUNICATION_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: [],\n      })) as CommunicationWalletProviderState;\n\n      // indicate that we've connected, for EIP-1193 compliance\n      this._handleConnect(currentLoginProvider, isLoggedIn);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized communication state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n\n  _handleWindow(windowId: string, { url, target, features }: { url?: string; target?: string; features?: string } = {}): void {\n    const finalUrl = new URL(url || `${this.torusUrl}/redirect?windowId=${windowId}`);\n    if (this.dappStorageKey) {\n      // If multiple instances, it returns the first one\n      if (finalUrl.hash) finalUrl.hash += `&dappStorageKey=${this.dappStorageKey}`;\n      else finalUrl.hash = `#dappStorageKey=${this.dappStorageKey}`;\n    }\n    const handledWindow = new PopupHandler({ url: finalUrl, target, features });\n    handledWindow.open();\n    if (!handledWindow.window) {\n      this._createPopupBlockAlert(windowId, finalUrl.href);\n      return;\n    }\n    // Add to collection only if window is opened\n    this.windowRefs[windowId] = handledWindow;\n    // We tell the iframe that the window has been successfully opened\n    this.request<{ windowId: string }, unknown>({\n      method: COMMUNICATION_JRPC_METHODS.OPENED_WINDOW,\n      params: { windowId },\n    });\n    handledWindow.once(\"close\", () => {\n      // user closed the window\n      delete this.windowRefs[windowId];\n      this.request<{ windowId: string }, unknown>({\n        method: COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW,\n        params: { windowId },\n      });\n    });\n  }\n\n  _displayIframe({ isFull = false, rid = \"\" }: { isFull?: boolean; rid?: string } = {}): void {\n    const style: Partial<CSSStyleDeclaration> = {};\n    // set phase\n    if (!isFull) {\n      style.display = this._state.torusWidgetVisibility ? \"block\" : \"none\";\n      style.height = \"70px\";\n      style.width = \"70px\";\n      switch (this._state.buttonPosition) {\n        case BUTTON_POSITION.TOP_LEFT:\n          style.top = \"0px\";\n          style.left = \"0px\";\n          style.right = \"auto\";\n          style.bottom = \"auto\";\n          break;\n        case BUTTON_POSITION.TOP_RIGHT:\n          style.top = \"0px\";\n          style.right = \"0px\";\n          style.left = \"auto\";\n          style.bottom = \"auto\";\n          break;\n        case BUTTON_POSITION.BOTTOM_RIGHT:\n          style.bottom = \"0px\";\n          style.right = \"0px\";\n          style.top = \"auto\";\n          style.left = \"auto\";\n          break;\n        case BUTTON_POSITION.BOTTOM_LEFT:\n        default:\n          style.bottom = \"0px\";\n          style.left = \"0px\";\n          style.top = \"auto\";\n          style.right = \"auto\";\n          break;\n      }\n    } else {\n      style.display = \"block\";\n      style.width = \"100%\";\n      style.height = \"100%\";\n      style.top = \"0px\";\n      style.right = \"0px\";\n      style.left = \"0px\";\n      style.bottom = \"0px\";\n    }\n    Object.assign(this.torusIframe.style, style);\n    this._state.isIFrameFullScreen = isFull;\n    this.request<{ isIFrameFullScreen: boolean; rid: string }, unknown>({\n      method: COMMUNICATION_JRPC_METHODS.IFRAME_STATUS,\n      params: { isIFrameFullScreen: isFull, rid },\n    });\n  }\n\n  hideTorusButton(): void {\n    this._state.torusWidgetVisibility = false;\n    this._displayIframe();\n  }\n\n  showTorusButton(): void {\n    this._state.torusWidgetVisibility = true;\n    this._displayIframe();\n  }\n\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n  protected _rpcRequest(payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], callback: (...args: unknown[]) => void): void {\n    const cb = callback;\n    const _payload = payload;\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n    }\n    this.tryWindowHandle(_payload as JRPCRequest<unknown>[], cb);\n  }\n\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param currentLoginProvider - The login Provider\n   * emits TorusInpageProvider#connect\n   */\n  protected _handleConnect(currentLoginProvider: string, isLoggedIn: boolean): void {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", { currentLoginProvider, isLoggedIn });\n      log.debug(messages.info.connected(currentLoginProvider));\n    }\n  }\n\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n  protected _handleDisconnect(isRecoverable: boolean, errorMessage?: string): void {\n    if (this._state.isConnected || (!this._state.isPermanentlyDisconnected && !isRecoverable)) {\n      this._state.isConnected = false;\n\n      let error: Error;\n      if (isRecoverable) {\n        error = new EthereumRpcError(\n          1013, // Try again later\n          errorMessage || messages.errors.disconnected()\n        );\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(\n          1011, // Internal error\n          errorMessage || messages.errors.permanentlyDisconnected()\n        );\n        log.error(error);\n        this._state.currentLoginProvider = null;\n        this._state.isLoggedIn = false;\n        this._state.torusWidgetVisibility = false;\n        this._state.isIFrameFullScreen = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n\n      this.emit(\"disconnect\", error);\n    }\n  }\n\n  // Called if the iframe wants to close the window cause it is done processing the request\n  private _handleCloseWindow(params: { windowId?: string }): void {\n    const { windowId } = params;\n    if (this.windowRefs[windowId]) {\n      this.windowRefs[windowId].close();\n      delete this.windowRefs[windowId];\n    }\n  }\n\n  private async _createPopupBlockAlert(windowId: string, url: string): Promise<void> {\n    const logoUrl = this.getLogoUrl();\n    const torusAlert = htmlToElement<HTMLDivElement>(\n      '<div id=\"torusAlert\" class=\"torus-alert--v2\">' +\n        `<div id=\"torusAlert__logo\"><img src=\"${logoUrl}\" /></div>` +\n        \"<div>\" +\n        `<h1 id=\"torusAlert__title\">${this.embedTranslations.actionRequired}</h1>` +\n        `<p id=\"torusAlert__desc\">${this.embedTranslations.pendingAction}</p>` +\n        \"</div>\" +\n        \"</div>\"\n    );\n\n    const successAlert = htmlToElement(`<div><a id=\"torusAlert__btn\">${this.embedTranslations.continue}</a></div>`);\n    const btnContainer = htmlToElement('<div id=\"torusAlert__btn-container\"></div>');\n    btnContainer.appendChild(successAlert);\n    torusAlert.appendChild(btnContainer);\n    const bindOnLoad = () => {\n      successAlert.addEventListener(\"click\", () => {\n        this._handleWindow(windowId, {\n          url,\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW),\n        });\n        torusAlert.remove();\n        if (this.torusAlertContainer.children.length === 0) this.torusAlertContainer.style.display = \"none\";\n      });\n    };\n\n    const attachOnLoad = () => {\n      this.torusAlertContainer.appendChild(torusAlert);\n    };\n\n    await documentReady();\n    attachOnLoad();\n    bindOnLoad();\n    this.torusAlertContainer.style.display = \"block\";\n  }\n\n  private getLogoUrl(): string {\n    const logoUrl = `${this.torusUrl}/images/torus_icon-blue.svg`;\n    return logoUrl;\n  }\n}\n\nexport default TorusCommunicationProvider;\n","import { InPageWalletProviderState, PROVIDER_JRPC_METHODS, PROVIDER_NOTIFICATIONS } from \"@toruslabs/base-controllers\";\nimport { JRPCRequest, JRPCSuccess } from \"@toruslabs/openlogin-jrpc\";\nimport { EthereumRpcError } from \"eth-rpc-errors\";\nimport dequal from \"fast-deep-equal\";\nimport type { Duplex } from \"readable-stream\";\n\nimport BaseProvider from \"./baseProvider\";\nimport { InPageProviderState, ProviderOptions, RequestArguments, UnValidatedJsonRpcRequest } from \"./interfaces\";\nimport log from \"./loglevel\";\nimport messages from \"./messages\";\n\nclass TorusInPageProvider extends BaseProvider<InPageProviderState> {\n  protected static _defaultState: InPageProviderState = {\n    accounts: null,\n    isConnected: false,\n    isUnlocked: false,\n    initialized: false,\n    isPermanentlyDisconnected: false,\n    hasEmittedConnection: false,\n  };\n\n  /**\n   * The chain ID of the currently connected Solana chain.\n   * See [chainId.network]{@link https://chainid.network} for more information.\n   */\n  public chainId: string | null;\n\n  /**\n   * The user's currently selected Solana address.\n   * If null, Torus is either locked or the user has not permitted any\n   * addresses to be viewed.\n   */\n  public selectedAddress: string | null;\n\n  tryWindowHandle: (payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], cb: (...args: unknown[]) => void) => void;\n\n  constructor(connectionStream: Duplex, { maxEventListeners = 100, jsonRpcStreamName = \"provider\" }: ProviderOptions) {\n    super(connectionStream, { maxEventListeners, jsonRpcStreamName });\n\n    // private state\n    this._state = {\n      ...TorusInPageProvider._defaultState,\n    };\n\n    // public state\n    this.selectedAddress = null;\n    this.chainId = null;\n\n    this._handleAccountsChanged = this._handleAccountsChanged.bind(this);\n    this._handleChainChanged = this._handleChainChanged.bind(this);\n    this._handleUnlockStateChanged = this._handleUnlockStateChanged.bind(this);\n\n    // setup own event listeners\n\n    // EIP-1193 connect\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n\n    const jsonRpcNotificationHandler = (payload: RequestArguments<unknown[] | Record<string, unknown>>) => {\n      const { method, params } = payload;\n      if (method === PROVIDER_NOTIFICATIONS.ACCOUNTS_CHANGED) {\n        this._handleAccountsChanged(params as unknown[]);\n      } else if (method === PROVIDER_NOTIFICATIONS.UNLOCK_STATE_CHANGED) {\n        this._handleUnlockStateChanged(params as Record<string, unknown>);\n      } else if (method === PROVIDER_NOTIFICATIONS.CHAIN_CHANGED) {\n        this._handleChainChanged(params as Record<string, unknown>);\n      }\n    };\n\n    // json rpc notification listener\n    this.jsonRpcConnectionEvents.on(\"notification\", jsonRpcNotificationHandler);\n  }\n\n  /**\n   * Returns whether the inpage provider is connected to Torus.\n   */\n  isConnected(): boolean {\n    return this._state.isConnected;\n  }\n\n  // Private Methods\n  //= ===================\n  /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */\n  async _initializeState(): Promise<void> {\n    try {\n      const { accounts, chainId, isUnlocked } = (await this.request({\n        method: PROVIDER_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: [],\n      })) as InPageWalletProviderState;\n\n      // indicate that we've connected, for EIP-1193 compliance\n      this.emit(\"connect\", { chainId });\n\n      this._handleChainChanged({ chainId });\n      this._handleUnlockStateChanged({ accounts, isUnlocked });\n      this._handleAccountsChanged(accounts);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized provider state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n  _rpcRequest(payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], callback: (...args: unknown[]) => void, isInternal = false): void {\n    let cb = callback;\n    const _payload = payload;\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n\n      if (_payload.method === \"solana_accounts\" || _payload.method === \"solana_requestAccounts\") {\n        // handle accounts changing\n        cb = (err: Error, res: JRPCSuccess<string[]>) => {\n          this._handleAccountsChanged(res.result || [], _payload.method === \"solana_accounts\", isInternal);\n          callback(err, res);\n        };\n      } else if (_payload.method === \"wallet_getProviderState\") {\n        this._rpcEngine.handle(payload as JRPCRequest<unknown>, cb);\n        return;\n      }\n    }\n    this.tryWindowHandle(_payload, cb);\n  }\n\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits TorusInpageProvider#connect\n   */\n  protected _handleConnect(chainId: string): void {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", { chainId });\n      log.debug(messages.info.connected(chainId));\n    }\n  }\n\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n  protected _handleDisconnect(isRecoverable: boolean, errorMessage?: string): void {\n    if (this._state.isConnected || (!this._state.isPermanentlyDisconnected && !isRecoverable)) {\n      this._state.isConnected = false;\n\n      let error: Error;\n      if (isRecoverable) {\n        error = new EthereumRpcError(\n          1013, // Try again later\n          errorMessage || messages.errors.disconnected()\n        );\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(\n          1011, // Internal error\n          errorMessage || messages.errors.permanentlyDisconnected()\n        );\n        log.error(error);\n        this.chainId = null;\n        this._state.accounts = null;\n        this.selectedAddress = null;\n        this._state.isUnlocked = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n\n      this.emit(\"disconnect\", error);\n    }\n  }\n\n  /**\n   * Called when accounts may have changed.\n   */\n  protected _handleAccountsChanged(accounts: unknown[], isEthAccounts = false, isInternal = false): void {\n    // defensive programming\n    let finalAccounts = accounts;\n    if (!Array.isArray(finalAccounts)) {\n      log.error(\"Torus: Received non-array accounts parameter. Please report this bug.\", finalAccounts);\n      finalAccounts = [];\n    }\n\n    for (const account of accounts) {\n      if (typeof account !== \"string\") {\n        log.error(\"Torus: Received non-string account. Please report this bug.\", accounts);\n        finalAccounts = [];\n        break;\n      }\n    }\n\n    // emit accountsChanged if anything about the accounts array has changed\n    if (!dequal(this._state.accounts, finalAccounts)) {\n      // we should always have the correct accounts even before solana_accounts\n      // returns, except in cases where isInternal is true\n      if (isEthAccounts && Array.isArray(this._state.accounts) && this._state.accounts.length > 0 && !isInternal) {\n        log.error('Torus: \"solana_accounts\" unexpectedly updated accounts. Please report this bug.', finalAccounts);\n      }\n\n      this._state.accounts = finalAccounts as string[];\n      this.emit(\"accountsChanged\", finalAccounts);\n    }\n\n    // handle selectedAddress\n    if (this.selectedAddress !== finalAccounts[0]) {\n      this.selectedAddress = (finalAccounts[0] as string) || null;\n    }\n  }\n\n  /**\n   * Upon receipt of a new chainId and networkVersion, emits corresponding\n   * events and sets relevant public state.\n   * Does nothing if neither the chainId nor the networkVersion are different\n   * from existing values.\n   *\n   * emits TorusInpageProvider#chainChanged\n   * @param networkInfo - An object with network info.\n   */\n  protected _handleChainChanged({ chainId }: { chainId?: string } = {}): void {\n    if (!chainId) {\n      log.error(\"Torus: Received invalid network parameters. Please report this bug.\", { chainId });\n      return;\n    }\n\n    if (chainId === \"loading\") {\n      this._handleDisconnect(true);\n    } else {\n      this._handleConnect(chainId);\n\n      if (chainId !== this.chainId) {\n        this.chainId = chainId;\n        if (this._state.initialized) {\n          this.emit(\"chainChanged\", this.chainId);\n        }\n      }\n    }\n  }\n\n  /**\n   * Upon receipt of a new isUnlocked state, sets relevant public state.\n   * Calls the accounts changed handler with the received accounts, or an empty\n   * array.\n   *\n   * Does nothing if the received value is equal to the existing value.\n   * There are no lock/unlock events.\n   *\n   * @param opts - Options bag.\n   */\n  protected _handleUnlockStateChanged({ accounts, isUnlocked }: { accounts?: string[]; isUnlocked?: boolean } = {}): void {\n    if (typeof isUnlocked !== \"boolean\") {\n      log.error(\"Torus: Received invalid isUnlocked parameter. Please report this bug.\", { isUnlocked });\n      return;\n    }\n\n    if (isUnlocked !== this._state.isUnlocked) {\n      this._state.isUnlocked = isUnlocked;\n      this._handleAccountsChanged(accounts || []);\n    }\n  }\n}\n\nexport default TorusInPageProvider;\n","/**\n * Returns whether the given image URL exists\n */\nfunction imgExists(url: string): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    try {\n      const img = document.createElement(\"img\");\n      img.onload = () => resolve(true);\n      img.onerror = () => resolve(false);\n      img.src = url;\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n\n/**\n * Extracts a name for the site from the DOM\n */\nconst getSiteName = (window: Window): string => {\n  const { document } = window;\n\n  const siteName = document.querySelector<HTMLMetaElement>('head > meta[property=\"og:site_name\"]');\n  if (siteName) {\n    return siteName.content;\n  }\n\n  const metaTitle = document.querySelector<HTMLMetaElement>('head > meta[name=\"title\"]');\n  if (metaTitle) {\n    return metaTitle.content;\n  }\n\n  if (document.title && document.title.length > 0) {\n    return document.title;\n  }\n\n  return window.location.hostname;\n};\n\n/**\n * Extracts an icon for the site from the DOM\n */\nasync function getSiteIcon(window: Window): Promise<string> {\n  try {\n    const { document } = window;\n\n    // Use the site's favicon if it exists\n    let icon = document.querySelector<HTMLLinkElement>('head > link[rel=\"shortcut icon\"]');\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    }\n\n    // Search through available icons in no particular order\n    icon = Array.from(document.querySelectorAll<HTMLLinkElement>('head > link[rel=\"icon\"]')).find((_icon) => Boolean(_icon.href));\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    }\n\n    return \"\";\n  } catch (error) {\n    return \"\";\n  }\n}\n\n/**\n * Gets site metadata and returns it\n *\n */\nconst getSiteMetadata = async (): Promise<{ name: string; icon: string }> => ({\n  name: getSiteName(window),\n  icon: await getSiteIcon(window),\n});\n\nexport default getSiteMetadata;\n","import { PublicKey, SignaturePubkeyPair, Transaction } from \"@solana/web3.js\";\nimport { COMMUNICATION_JRPC_METHODS } from \"@toruslabs/base-controllers\";\nimport { setAPIKey } from \"@toruslabs/http-helpers\";\nimport { BasePostMessageStream, getRpcPromiseCallback, JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\n\nimport TorusCommunicationProvider from \"./communicationProvider\";\nimport configuration from \"./config\";\nimport { documentReady, htmlToElement } from \"./embedUtils\";\nimport TorusInPageProvider from \"./inPageProvider\";\nimport {\n  BUTTON_POSITION,\n  LOGIN_PROVIDER_TYPE,\n  NetworkInterface,\n  PAYMENT_PROVIDER_TYPE,\n  PaymentParams,\n  TORUS_BUILD_ENV,\n  TorusCtorArgs,\n  TorusLoginParams,\n  TorusParams,\n  UnValidatedJsonRpcRequest,\n  UserInfo,\n  WALLET_PATH,\n} from \"./interfaces\";\nimport log from \"./loglevel\";\nimport PopupHandler from \"./PopupHandler\";\nimport getSiteMetadata from \"./siteMetadata\";\nimport {\n  FEATURES_CONFIRM_WINDOW,\n  FEATURES_DEFAULT_WALLET_WINDOW,\n  FEATURES_PROVIDER_CHANGE_WINDOW,\n  getPopupFeatures,\n  getTorusUrl,\n  getWindowId,\n  storageAvailable,\n} from \"./utils\";\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst { version } = require(\"../package.json\");\nconst PROVIDER_UNSAFE_METHODS = [\"send_transaction\", \"sign_transaction\", \"sign_all_transactions\", \"sign_message\", \"connect\"];\nconst COMMUNICATION_UNSAFE_METHODS = [COMMUNICATION_JRPC_METHODS.SET_PROVIDER];\n\nconst isLocalStorageAvailable = storageAvailable(\"localStorage\");\n\n// preload for iframe doesn't work https://bugs.chromium.org/p/chromium/issues/detail?id=593267\n(async function preLoadIframe() {\n  try {\n    if (typeof document === \"undefined\") return;\n    const torusIframeHtml = document.createElement(\"link\");\n    const { torusUrl } = await getTorusUrl(\"production\");\n    torusIframeHtml.href = `${torusUrl}/frame`;\n    torusIframeHtml.crossOrigin = \"anonymous\";\n    torusIframeHtml.type = \"text/html\";\n    torusIframeHtml.rel = \"prefetch\";\n    if (torusIframeHtml.relList && torusIframeHtml.relList.supports) {\n      if (torusIframeHtml.relList.supports(\"prefetch\")) {\n        document.head.appendChild(torusIframeHtml);\n      }\n    }\n  } catch (error) {\n    log.warn(error);\n  }\n})();\n\nclass Torus {\n  isInitialized: boolean;\n\n  torusAlert: HTMLDivElement;\n\n  modalZIndex: number;\n\n  alertZIndex: number;\n\n  public requestedLoginProvider?: LOGIN_PROVIDER_TYPE;\n\n  provider: TorusInPageProvider;\n\n  communicationProvider: TorusCommunicationProvider;\n\n  dappStorageKey: string;\n\n  private torusAlertContainer: HTMLDivElement;\n\n  private torusUrl: string;\n\n  private torusIframe: HTMLIFrameElement;\n\n  private styleLink: HTMLLinkElement;\n\n  constructor({ modalZIndex = 99999 }: TorusCtorArgs = {}) {\n    this.torusUrl = \"\";\n    this.isInitialized = false; // init done\n    this.requestedLoginProvider = null;\n    this.modalZIndex = modalZIndex;\n    this.alertZIndex = modalZIndex + 1000;\n    this.dappStorageKey = \"\";\n  }\n\n  get isLoggedIn(): boolean {\n    if (!this.communicationProvider) return false;\n    return this.communicationProvider.isLoggedIn;\n  }\n\n  async init({\n    buildEnv = TORUS_BUILD_ENV.PRODUCTION,\n    enableLogging = false,\n    network,\n    showTorusButton = false,\n    useLocalStorage = false,\n    buttonPosition = BUTTON_POSITION.BOTTOM_LEFT,\n    apiKey = \"torus-default\",\n    extraParams = {},\n  }: TorusParams = {}): Promise<void> {\n    if (this.isInitialized) throw new Error(\"Already initialized\");\n    setAPIKey(apiKey);\n    const { torusUrl, logLevel } = await getTorusUrl(buildEnv);\n    log.enableAll();\n    log.info(torusUrl, \"url loaded\");\n    log.info(`Solana Embed Version :${version}`);\n    this.torusUrl = torusUrl;\n    log.setDefaultLevel(logLevel);\n    if (enableLogging) log.enableAll();\n    else log.disableAll();\n\n    const dappStorageKey = this.handleDappStorageKey(useLocalStorage);\n\n    const torusIframeUrl = new URL(torusUrl);\n    if (torusIframeUrl.pathname.endsWith(\"/\")) torusIframeUrl.pathname += \"frame\";\n    else torusIframeUrl.pathname += \"/frame\";\n\n    const hashParams = new URLSearchParams();\n    if (dappStorageKey) hashParams.append(\"dappStorageKey\", dappStorageKey);\n    hashParams.append(\"origin\", window.location.origin);\n\n    torusIframeUrl.hash = hashParams.toString();\n\n    // Iframe code\n    this.torusIframe = htmlToElement<HTMLIFrameElement>(\n      `<iframe\n        id=\"torusIframe\"\n        class=\"torusIframe\"\n        src=\"${torusIframeUrl.href}\"\n        style=\"display: none; position: fixed; top: 0; right: 0; width: 100%;\n        height: 100%; border: none; border-radius: 0; z-index: ${this.modalZIndex.toString()}\"\n      ></iframe>`\n    );\n\n    this.torusAlertContainer = htmlToElement<HTMLDivElement>(\n      `<div id=\"torusAlertContainer\" style=\"display:none; z-index: ${this.alertZIndex.toString()}\"></div>`\n    );\n\n    this.styleLink = htmlToElement<HTMLLinkElement>(`<link href=\"${torusUrl}/css/widget.css\" rel=\"stylesheet\" type=\"text/css\">`);\n    const handleSetup = async () => {\n      return new Promise<void>((resolve, reject) => {\n        try {\n          window.document.head.appendChild(this.styleLink);\n          window.document.body.appendChild(this.torusIframe);\n          window.document.body.appendChild(this.torusAlertContainer);\n          this.torusIframe.addEventListener(\"load\", async () => {\n            const dappMetadata = await getSiteMetadata();\n            // send init params here\n            this.torusIframe.contentWindow.postMessage(\n              {\n                buttonPosition,\n                apiKey,\n                network,\n                dappMetadata,\n                extraParams,\n              },\n              torusIframeUrl.origin\n            );\n            await this._setupWeb3({\n              torusUrl,\n            });\n            if (showTorusButton) this.showTorusButton();\n            else this.hideTorusButton();\n            this.isInitialized = true;\n            (window as any).torus = this;\n            resolve();\n          });\n        } catch (error) {\n          reject(error);\n        }\n      });\n    };\n\n    await documentReady();\n    await handleSetup();\n  }\n\n  async login(params: TorusLoginParams = {}): Promise<string[]> {\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n    try {\n      this.requestedLoginProvider = params.loginProvider || null;\n      if (!this.requestedLoginProvider) {\n        this.communicationProvider._displayIframe({ isFull: true });\n      }\n      // If user is already logged in, we assume they have given access to the website\n      const res = await new Promise((resolve, reject) => {\n        // We use this method because we want to update inPage provider state with account info\n        this.provider._rpcRequest(\n          { method: \"solana_requestAccounts\", params: [this.requestedLoginProvider, params.login_hint] },\n          getRpcPromiseCallback(resolve, reject)\n        );\n      });\n\n      if (Array.isArray(res) && res.length > 0) {\n        return res;\n      }\n      // This would never happen, but just in case\n      throw new Error(\"Login failed\");\n    } catch (error) {\n      log.error(\"login failed\", error);\n      throw error;\n    } finally {\n      if (this.communicationProvider.isIFrameFullScreen) this.communicationProvider._displayIframe();\n    }\n  }\n\n  async loginWithPrivateKey(loginParams: { privateKey: string; userInfo: UserInfo }): Promise<void> {\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n    const { privateKey, userInfo } = loginParams;\n    const { success } = await this.communicationProvider.request<{ privateKey: string; userInfo: UserInfo }, { success: boolean }>({\n      method: \"login_with_private_key\",\n      params: {\n        privateKey,\n        userInfo,\n      },\n    });\n    if (!success) throw new Error(\"Login Failed\");\n  }\n\n  async logout(): Promise<void> {\n    if (!this.communicationProvider.isLoggedIn) throw new Error(\"Not logged in\");\n\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.LOGOUT,\n      params: [],\n    });\n    this.requestedLoginProvider = null;\n  }\n\n  async cleanUp(): Promise<void> {\n    if (this.communicationProvider.isLoggedIn) {\n      await this.logout();\n    }\n    this.clearInit();\n  }\n\n  clearInit(): void {\n    function isElement(element: unknown) {\n      return element instanceof Element || element instanceof Document;\n    }\n    if (isElement(this.styleLink) && window.document.body.contains(this.styleLink)) {\n      this.styleLink.remove();\n      this.styleLink = undefined;\n    }\n    if (isElement(this.torusIframe) && window.document.body.contains(this.torusIframe)) {\n      this.torusIframe.remove();\n      this.torusIframe = undefined;\n    }\n    if (isElement(this.torusAlertContainer) && window.document.body.contains(this.torusAlertContainer)) {\n      this.torusAlert = undefined;\n      this.torusAlertContainer.remove();\n      this.torusAlertContainer = undefined;\n    }\n    this.isInitialized = false;\n  }\n\n  hideTorusButton(): void {\n    this.communicationProvider.hideTorusButton();\n  }\n\n  showTorusButton(): void {\n    this.communicationProvider.showTorusButton();\n  }\n\n  async setProvider(params: NetworkInterface): Promise<void> {\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.SET_PROVIDER,\n      params: { ...params },\n    });\n  }\n\n  async showWallet(path: WALLET_PATH, params: Record<string, string> = {}): Promise<void> {\n    const instanceId = await this.communicationProvider.request<[], string>({\n      method: COMMUNICATION_JRPC_METHODS.WALLET_INSTANCE_ID,\n      params: [],\n    });\n    const finalPath = path ? `/${path}` : \"\";\n\n    const finalUrl = new URL(`${this.torusUrl}/wallet${finalPath}`);\n    // Using URL constructor to prevent js injection and allow parameter validation.!\n    finalUrl.searchParams.append(\"instanceId\", instanceId);\n    Object.keys(params).forEach((x) => {\n      finalUrl.searchParams.append(x, params[x]);\n    });\n    if (this.dappStorageKey) {\n      finalUrl.hash = `#dappStorageKey=${this.dappStorageKey}`;\n    }\n    // No need to track this window state. Hence, no _handleWindow call.\n    const walletWindow = new PopupHandler({ url: finalUrl, features: getPopupFeatures(FEATURES_DEFAULT_WALLET_WINDOW) });\n    walletWindow.open();\n  }\n\n  async getUserInfo(): Promise<UserInfo> {\n    const userInfoResponse = await this.communicationProvider.request<[], UserInfo>({\n      method: COMMUNICATION_JRPC_METHODS.USER_INFO,\n      params: [],\n    });\n    return userInfoResponse as UserInfo;\n  }\n\n  async initiateTopup(provider: PAYMENT_PROVIDER_TYPE, params: PaymentParams): Promise<boolean> {\n    if (!this.isInitialized) throw new Error(\"Torus is not initialized\");\n    const windowId = getWindowId();\n    this.communicationProvider._handleWindow(windowId);\n    const topupResponse = await this.communicationProvider.request<\n      { provider: PAYMENT_PROVIDER_TYPE; params: PaymentParams; windowId: string },\n      boolean\n    >({\n      method: COMMUNICATION_JRPC_METHODS.TOPUP,\n      params: { provider, params, windowId },\n    });\n    return topupResponse;\n  }\n\n  // Solana specific API\n  async getAccounts() {\n    const response = (await this.provider.request({\n      method: \"getAccounts\",\n      params: [],\n    })) as string[];\n    return response;\n  }\n\n  async sendTransaction(transaction: Transaction): Promise<string> {\n    const response = (await this.provider.request({\n      method: \"send_transaction\",\n      params: { message: transaction.serialize({ requireAllSignatures: false }).toString(\"hex\") },\n    })) as string;\n    return response;\n  }\n\n  async signTransaction(transaction: Transaction): Promise<Transaction> {\n    const response: string = (await this.provider.request({\n      method: \"sign_transaction\",\n      params: { message: transaction.serializeMessage().toString(\"hex\"), messageOnly: true },\n    })) as string;\n\n    // reconstruct signature pair\n    const parsed = JSON.parse(response);\n    const signature: SignaturePubkeyPair = { publicKey: new PublicKey(parsed.publicKey), signature: Buffer.from(parsed.signature, \"hex\") };\n    transaction.addSignature(signature.publicKey, signature.signature);\n    return transaction;\n  }\n\n  async signAllTransactions(transactions: Transaction[]): Promise<Transaction[]> {\n    const encodedMessage: string[] = transactions.map((tx) => {\n      return tx.serializeMessage().toString(\"hex\");\n    });\n    const responses: string[] = await this.provider.request({\n      method: \"sign_all_transactions\",\n      params: { message: encodedMessage, messageOnly: true },\n    });\n\n    // reconstruct signature pairs\n    const signatures: SignaturePubkeyPair[] = responses.map((item) => {\n      const parsed = JSON.parse(item);\n      return { publicKey: new PublicKey(parsed.publicKey), signature: Buffer.from(parsed.signature, \"hex\") };\n    });\n\n    transactions.forEach((tx, idx) => {\n      tx.addSignature(signatures[idx].publicKey, signatures[idx].signature);\n      return tx;\n    });\n    return transactions;\n  }\n\n  async signMessage(data: Uint8Array): Promise<Uint8Array> {\n    const response = (await this.provider.request({\n      method: \"sign_message\",\n      params: {\n        data,\n      },\n    })) as Uint8Array;\n    return response;\n  }\n\n  async getGaslessPublicKey(): Promise<string> {\n    const response = (await this.provider.request({\n      method: \"get_gasless_public_key\",\n      params: [],\n    })) as string;\n    return response;\n  }\n\n  // async connect(): Promise<boolean> {\n  //   const response = (await this.provider.request({\n  //     method: \"connect\",\n  //     params: {},\n  //   })) as boolean;\n  //   return response;\n  // }\n\n  private handleDappStorageKey(useLocalStorage: boolean) {\n    let dappStorageKey = \"\";\n    if (isLocalStorageAvailable && useLocalStorage) {\n      const storedKey = window.localStorage.getItem(configuration.localStorageKey);\n      if (storedKey) dappStorageKey = storedKey;\n      else {\n        const generatedKey = `torus-app-${getWindowId()}`;\n        window.localStorage.setItem(configuration.localStorageKey, generatedKey);\n        dappStorageKey = generatedKey;\n      }\n    }\n    this.dappStorageKey = dappStorageKey;\n    return dappStorageKey;\n  }\n\n  private async _setupWeb3(providerParams: { torusUrl: string }): Promise<void> {\n    log.info(\"setupWeb3 running\");\n    // setup background connection\n    const providerStream = new BasePostMessageStream({\n      name: \"embed_torus\",\n      target: \"iframe_torus\",\n      targetWindow: this.torusIframe.contentWindow,\n    });\n\n    // We create another LocalMessageDuplexStream for communication between dapp <> iframe\n    const communicationStream = new BasePostMessageStream({\n      name: \"embed_communication\",\n      target: \"iframe_communication\",\n      targetWindow: this.torusIframe.contentWindow,\n    });\n\n    // compose the inPage provider\n    const inPageProvider = new TorusInPageProvider(providerStream, {});\n    const communicationProvider = new TorusCommunicationProvider(communicationStream, {});\n\n    inPageProvider.tryWindowHandle = (payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], cb: (...args: unknown[]) => void) => {\n      const _payload = payload;\n      if (!Array.isArray(_payload) && PROVIDER_UNSAFE_METHODS.includes(_payload.method)) {\n        if (!this.communicationProvider.isLoggedIn) throw new Error(\"User Not Logged In\");\n        const windowId = getWindowId();\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW),\n        });\n        // for inPageProvider methods sending windowId in request instead of params\n        // as params might be positional.\n        _payload.windowId = windowId;\n      }\n      inPageProvider._rpcEngine.handle(_payload as JRPCRequest<unknown>[], cb);\n    };\n\n    communicationProvider.tryWindowHandle = (payload: JRPCRequest<unknown>, cb: (...args: unknown[]) => void) => {\n      const _payload = payload;\n      if (!Array.isArray(_payload) && COMMUNICATION_UNSAFE_METHODS.includes(_payload.method)) {\n        const windowId = getWindowId();\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_PROVIDER_CHANGE_WINDOW), // todo: are these features generic for all\n        });\n        // for communication methods sending window id in jrpc req params\n        (_payload.params as Record<string, unknown>).windowId = windowId;\n      }\n      communicationProvider._rpcEngine.handle(_payload as JRPCRequest<unknown>, cb);\n    };\n\n    // detect solana_requestAccounts and pipe to enable for now\n    const detectAccountRequestPrototypeModifier = (m) => {\n      const originalMethod = inPageProvider[m];\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const self = this;\n      inPageProvider[m] = function providerFunc(request, cb) {\n        const { method, params = [] } = request;\n        if (method === \"solana_requestAccounts\") {\n          if (!cb) return self.login({ loginProvider: params[0] });\n          self\n            .login({ loginProvider: params[0] })\n            // eslint-disable-next-line promise/no-callback-in-promise\n            .then((res) => cb(null, res))\n            // eslint-disable-next-line promise/no-callback-in-promise\n            .catch((err) => cb(err));\n        }\n        return originalMethod.apply(this, [request, cb]);\n      };\n    };\n\n    // Detects call to solana_requestAccounts in request & sendAsync and passes to login\n    detectAccountRequestPrototypeModifier(\"request\");\n    detectAccountRequestPrototypeModifier(\"sendAsync\");\n    detectAccountRequestPrototypeModifier(\"send\");\n\n    const proxiedInPageProvider = new Proxy(inPageProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true,\n    });\n\n    const proxiedCommunicationProvider = new Proxy(communicationProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true,\n    });\n\n    this.provider = proxiedInPageProvider;\n    this.communicationProvider = proxiedCommunicationProvider;\n\n    await Promise.all([\n      inPageProvider._initializeState(),\n      communicationProvider._initializeState({\n        ...providerParams,\n        dappStorageKey: this.dappStorageKey,\n        torusAlertContainer: this.torusAlertContainer,\n        torusIframe: this.torusIframe,\n      }),\n    ]);\n    log.debug(\"Torus - injected provider\");\n  }\n}\n\nexport default Torus;\n","import Torus, { NetworkInterface, TorusCtorArgs, TorusLoginParams, TorusParams } from \"@toruslabs/solana-embed\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  getChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { BaseSolanaAdapter } from \"@web3auth/base-solana-adapter\";\nimport { ITorusWalletProvider, TorusInjectedProvider } from \"@web3auth/solana-provider\";\n\nexport interface SolanaWalletOptions {\n  adapterSettings?: TorusCtorArgs;\n  loginSettings?: TorusLoginParams;\n  initParams?: Omit<TorusParams, \"network\">;\n  chainConfig?: CustomChainConfig;\n  sessionTime?: number;\n}\n\nexport class SolanaWalletAdapter extends BaseSolanaAdapter<void> {\n  readonly name: string = WALLET_ADAPTERS.TORUS_SOLANA;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.SOLANA;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.SOLANA;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public torusInstance: Torus | null = null;\n\n  private torusWalletOptions?: TorusCtorArgs;\n\n  private initParams?: TorusParams;\n\n  private loginSettings?: TorusLoginParams = {};\n\n  private solanaProvider: TorusInjectedProvider | null = null;\n\n  private rehydrated = false;\n\n  constructor(params: SolanaWalletOptions = {}) {\n    super();\n    this.torusWalletOptions = params.adapterSettings || {};\n    this.initParams = params.initParams || {};\n    this.loginSettings = params.loginSettings || {};\n    this.chainConfig = params.chainConfig || null;\n    this.sessionTime = params.sessionTime || 86400;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.solanaProvider) {\n      return this.solanaProvider?.provider || null;\n    }\n    return null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    // set chainConfig for mainnet by default if not set\n    let network: NetworkInterface;\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, \"0x1\");\n      const { blockExplorer, displayName, ticker, tickerName, rpcTarget, chainId } = this.chainConfig as CustomChainConfig;\n      network = { chainId, rpcTarget, blockExplorerUrl: blockExplorer, displayName, ticker, tickerName, logo: \"\" };\n    } else {\n      const { chainId, blockExplorer, displayName, rpcTarget, ticker, tickerName } = this.chainConfig as CustomChainConfig;\n      network = { chainId, rpcTarget, blockExplorerUrl: blockExplorer, displayName, tickerName, ticker, logo: \"\" };\n    }\n    this.torusInstance = new Torus(this.torusWalletOptions);\n    log.debug(\"initializing torus solana adapter init\");\n    await this.torusInstance.init({ showTorusButton: false, ...this.initParams, network });\n\n    this.solanaProvider = new TorusInjectedProvider({\n      config: {\n        chainConfig: this.chainConfig as CustomChainConfig,\n      },\n    });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.TORUS_SOLANA);\n\n    try {\n      log.debug(\"initializing torus solana adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached torus solana provider\", error);\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    if (!this.solanaProvider) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.TORUS_SOLANA });\n    try {\n      await this.torusInstance.login(this.loginSettings);\n      try {\n        const torusInpageProvider = this.torusInstance.provider as unknown as ITorusWalletProvider;\n        torusInpageProvider.sendTransaction = this.torusInstance.sendTransaction.bind(this.torusInstance);\n        torusInpageProvider.signAllTransactions = this.torusInstance.signAllTransactions.bind(this.torusInstance);\n        torusInpageProvider.signMessage = this.torusInstance.signMessage.bind(this.torusInstance);\n        torusInpageProvider.signTransaction = this.torusInstance.signTransaction.bind(this.torusInstance);\n        await this.solanaProvider.setupProvider(torusInpageProvider);\n      } catch (error: unknown) {\n        // some issue in solana wallet, always connecting to mainnet on init.\n        // fallback to change network if not connected to correct one on login.\n        if (error instanceof Web3AuthError && error.code === 5010) {\n          const { chainId, blockExplorer, displayName, rpcTarget, ticker, tickerName } = this.chainConfig as CustomChainConfig;\n          const network = { chainId, rpcTarget, blockExplorerUrl: blockExplorer, displayName, tickerName, ticker, logo: \"\" };\n          await this.torusInstance.setProvider(network);\n        } else {\n          throw error;\n        }\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.torusInstance.showTorusButton();\n      this.emit(ADAPTER_STATUS.CONNECTED, { adapter: WALLET_ADAPTERS.TORUS_SOLANA, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with torus solana wallet\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    await super.disconnect();\n    await this.torusInstance.logout();\n    if (options.cleanup) {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.torusInstance = null;\n      this.solanaProvider = null;\n    } else {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    const userInfo = await this.torusInstance.getUserInfo();\n    return userInfo;\n  }\n\n  setAdapterSettings(options: { sessionTime?: number }): void {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    if (options?.sessionTime) {\n      this.sessionTime = options.sessionTime;\n    }\n  }\n}\n","'use strict';\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n","'use strict';\n\nconst isStream = stream =>\n\tstream !== null &&\n\ttypeof stream === 'object' &&\n\ttypeof stream.pipe === 'function';\n\nisStream.writable = stream =>\n\tisStream(stream) &&\n\tstream.writable !== false &&\n\ttypeof stream._write === 'function' &&\n\ttypeof stream._writableState === 'object';\n\nisStream.readable = stream =>\n\tisStream(stream) &&\n\tstream.readable !== false &&\n\ttypeof stream._read === 'function' &&\n\ttypeof stream._readableState === 'object';\n\nisStream.duplex = stream =>\n\tisStream.writable(stream) &&\n\tisStream.readable(stream);\n\nisStream.transform = stream =>\n\tisStream.duplex(stream) &&\n\ttypeof stream._transform === 'function';\n\nmodule.exports = isStream;\n"],"names":["BaseSolanaAdapter","this","provider","chainConfig","_this$chainConfig","chainId","WalletLoginError","chainNamespace","status","ADAPTER_STATUS","request","method","accounts","length","existingToken","getSavedToken","name","checkIfTokenIsExpired","idToken","payload","domain","window","location","origin","uri","href","address","parseInt","version","nonce","Math","random","toString","slice","issuedAt","Date","toISOString","signChallenge","challenge","encodedMessage","TextEncoder","encode","params","message","display","signedMessage","verifySignedChallenge","bs58","sessionTime","saveToken","clearToken","BaseAdapter","module","exports","ALPHABET","TypeError","BASE_MAP","Uint8Array","j","i","x","charAt","xc","charCodeAt","BASE","LEADER","FACTOR","log","iFACTOR","decodeUnsafe","source","psz","zeroes","size","b256","carry","it3","Error","it4","vch","ArrayBuffer","isView","buffer","byteOffset","byteLength","Array","isArray","from","pbegin","pend","b58","it1","it2","str","repeat","decode","string","basex","require","disconnected","permanentlyDisconnected","unsupportedSync","invalidDuplexStream","invalidOptions","maxEventListeners","invalidRequestArgs","invalidRequestMethod","invalidRequestParams","invalidLoggerObject","invalidLoggerMethod","connected","TORUS_BUILD_ENV","BUTTON_POSITION","supportedVerifierList","api","translations","en","embed","continue","actionRequired","pendingAction","cookiesRequired","enableCookies","clickHere","de","ja","ko","zh","prodTorusUrl","localStorageKey","hostname","loglevel","getWindowId","getTorusUrl","buildEnv","torusUrl","logLevel","FEATURES_PROVIDER_CHANGE_WINDOW","height","width","FEATURES_DEFAULT_WALLET_WINDOW","FEATURES_DEFAULT_POPUP_WINDOW","FEATURES_CONFIRM_WINDOW","getPopupFeatures","_ref","w","h","dualScreenLeft","undefined","screenLeft","screenX","dualScreenTop","screenTop","screenY","innerWidth","document","documentElement","clientWidth","screen","innerHeight","clientHeight","left","abs","top","BaseProvider","constructor","connectionStream","jsonRpcStreamName","_defineProperty","isDuplexStream","messages","isTorus","setMaxListeners","_handleConnect","bind","_handleDisconnect","_handleStreamDisconnect","_rpcRequest","_initializeState","sendAsync","mux","ObjectMultiplex","pump","ignoreStream","jsonRpcConnection","createStreamMiddleware","stream","createStream","rpcEngine","JRPCEngine","push","createIdRemapMiddleware","req","res","next","error","ethErrors","data","done","createLoggerMiddleware","middleware","_rpcEngine","jsonRpcConnectionEvents","events","args","Promise","resolve","reject","getRpcPromiseCallback","send","callback","streamName","remoteLabel","emitter","warningMsg","stack","warn","listenerCount","emit","logStreamDisconnectWarning","SafeEventEmitter","handleEvent","handle","eventName","handler","handlerArgs","arguments","handlerWrapper","removeEventListener","addEventListener","documentReady","readyState","htmlToElement","html","template","createElement","trimmedHtml","trim","innerHTML","content","firstChild","PopupHandler","url","target","features","windowTimer","iClosedWindow","_setupTimer","Number","setInterval","closed","clearInterval","open","focus","close","redirect","locationReplaceOnRedirect","replace","TorusCommunicationProvider","_state","_defaultState","dappStorageKey","languageTranslations","configuration","userLanguage","navigator","language","userLanguages","split","Object","prototype","hasOwnProperty","call","config","getUserLanguage","embedTranslations","windowRefs","on","isConnected","COMMUNICATION_NOTIFICATIONS","isFullScreen","rid","_displayIframe","isFull","windowId","_createPopupBlockAlert","_handleCloseWindow","currentLoginProvider","isLoggedIn","isIFrameFullScreen","torusAlertContainer","torusIframe","COMMUNICATION_JRPC_METHODS","info","initialized","_handleWindow","finalUrl","URL","concat","hash","handledWindow","once","style","right","bottom","torusWidgetVisibility","buttonPosition","assign","hideTorusButton","showTorusButton","cb","_payload","jsonrpc","tryWindowHandle","debug","isRecoverable","errorMessage","isPermanentlyDisconnected","EthereumRpcError","logoUrl","getLogoUrl","torusAlert","successAlert","btnContainer","appendChild","bindOnLoad","remove","children","attachOnLoad","hasEmittedConnection","TorusInPageProvider","selectedAddress","_handleAccountsChanged","_handleChainChanged","_handleUnlockStateChanged","PROVIDER_NOTIFICATIONS","PROVIDER_JRPC_METHODS","isUnlocked","isInternal","err","result","isEthAccounts","finalAccounts","account","dequal","imgExists","img","onload","onerror","src","e","getSiteName","siteName","querySelector","metaTitle","title","getSiteIcon","icon","querySelectorAll","find","_icon","Boolean","getSiteMetadata","PROVIDER_UNSAFE_METHODS","COMMUNICATION_UNSAFE_METHODS","isLocalStorageAvailable","type","storage","setItem","removeItem","code","storageAvailable","torusIframeHtml","crossOrigin","rel","relList","supports","head","Torus","modalZIndex","isInitialized","requestedLoginProvider","alertZIndex","communicationProvider","enableLogging","network","useLocalStorage","apiKey","extraParams","setAPIKey","enableAll","setDefaultLevel","disableAll","handleDappStorageKey","torusIframeUrl","pathname","endsWith","hashParams","URLSearchParams","append","styleLink","handleSetup","body","dappMetadata","contentWindow","postMessage","_setupWeb3","torus","loginProvider","login_hint","loginParams","privateKey","userInfo","success","logout","clearInit","isElement","element","Element","Document","contains","path","instanceId","finalPath","searchParams","keys","forEach","userInfoResponse","topupResponse","response","transaction","serialize","requireAllSignatures","serializeMessage","messageOnly","parsed","JSON","parse","signature","publicKey","PublicKey","Buffer","addSignature","transactions","map","tx","responses","signatures","item","idx","storedKey","localStorage","getItem","generatedKey","providerParams","providerStream","BasePostMessageStream","targetWindow","communicationStream","inPageProvider","includes","detectAccountRequestPrototypeModifier","m","originalMethod","self","login","then","catch","apply","proxiedInPageProvider","Proxy","deleteProperty","proxiedCommunicationProvider","all","SolanaWalletAdapter","WALLET_ADAPTERS","ADAPTER_NAMESPACES","CHAIN_NAMESPACES","ADAPTER_CATEGORY","torusWalletOptions","adapterSettings","initParams","loginSettings","solanaProvider","_","options","blockExplorer","displayName","rpcTarget","ticker","tickerName","blockExplorerUrl","logo","getChainConfig","torusInstance","init","TorusInjectedProvider","ADAPTER_EVENTS","autoConnect","rehydrated","connect","WalletInitializationError","adapter","torusInpageProvider","sendTransaction","signAllTransactions","signMessage","signTransaction","setupProvider","Web3AuthError","setProvider","reconnected","cleanup","getUserInfo","setAdapterSettings","equal","a","b","RegExp","flags","valueOf","key","isStream","pipe","writable","_write","_writableState","readable","_read","_readableState","duplex","transform","_transform"],"sourceRoot":""}